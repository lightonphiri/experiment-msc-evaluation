
Step 1: Check if index file exists
  
  If index file exists
    if new object dataStamp > minimum dateStamp in index
      write new object to repository
      pop out object with minimum dateStamp from index
      push new object
      sort index chronologically [optional]
    else
      write new object to repository
  else
    write new object to repository

key|value
/home/lphiri/datasets/ndltd/RSS2feeds2/DRESDEN/oai-union.ndltd.org-DRESDEN--oai-qucosa.de-bsz-14-qucosa-83783.metadata|2012-09-14 03:04:24
/home/lphiri/datasets/ndltd/RSS2feeds2/DITED/oai-union.ndltd.org-DITED--urn-dited-bn-4.metadata|2012-09-21 03:04:05
/home/lphiri/datasets/ndltd/RSS2feeds2/DITED/oai-union.ndltd.org-DITED--urn-dited-bn-6.metadata|2012-09-21 03:04:05
/home/lphiri/datasets/ndltd/RSS2feeds2/DITED/oai-union.ndltd.org-DITED--urn-dited-bn-7.metadata|2012-09-21 03:04:05
/home/lphiri/datasets/ndltd/RSS2feeds2/DRESDEN/oai-union.ndltd.org-DRESDEN--oai-qucosa.de-bsz-14-qucosa-69227.metadata|2012-09-21 03:04:11



*** Metrics***

    Metrics
      -> Execution Time
	-> Initial trip [bad trip]
	-> Followup trip (s) [good trip]
      -> Response Time
	-> Trip + Write + Read
	  -> Trip : Execution Time
	  -> Write : Index file
	  -> 
	  -> Read/Parse : Index file
	  -> Write : RSS feed file
	  -> 
	-> Memory Usage
	  -> trip
	  -> rss generation
	-> 
      -> 


    RSS Feed reader
      -> Initial trip [if no index file exists]
      -> Followup tip
	-> Read : Index file
	  -> read
	  -> parse
	-> Generate : RSS feed objects
	  -> new objects
	  -> 
	-> Write : RSS feed file [if AND ONLY if index ctime is earlier than feed file ctime]
	  -> 
	-> Read : RSS feed file
	  -> 
      -> 

    No index entries
    Existing index entries




# redirect stdout to a disk file
import oaipmh2simplyct
import sys
saveout = sys.stdout
outfile = open('yaba-20121022.txt', 'w')
sys.stdout = outfile

oaipmh2simplyct.oaipmh2simplyctparser('../oaipmh-responses/page-0')

outfile.flush()
outfile.close()
sys.stdout = saveout


pubDate = datetime.strptime(feed_pubDate.replace("T", " ").replace("Z", ""), '%Y-%m-%d %H:%M:%S')

# 
import os
import oaipmh2simplyct
import xml
from datetime import datetime
from xml.dom.minidom import parse, parseString

def rssindex(xmlrecord):
  # parse xml file
  #xmlrecord = parse(xmlrecorddoc)
  # identifier for file name
  identifier = xmlrecord.getElementsByTagName('identifier')[0].firstChild.data
  identifier = identifier.replace("/", "--") # replace '/' with two hyphens
  identifier = identifier.replace(":", "-") # replace ':' with single hyphen
  identifier = identifier + '.metadata'
  # setSpec for level-1 container name
  container = xmlrecord.getElementsByTagName('setSpec')[0].firstChild.data
  # dateStamp for rss publication date
  rssdate = xmlrecord.getElementsByTagName('datestamp')[0].firstChild.data
  rssdate = datetime.strptime(rssdate.replace("T", " ").replace("Z", ""), '%Y-%m-%d %H:%M:%S') # format date string to convert to approapriate format
  # pre-processing input stream before writing
  try:
    xmldocument = parseString(xmlrecord.toxml().encode('utf-8'))
  except xml.parsers.expat.ExpatError as details:
    pass
  # write new object to repository the simplyct conventional way
  #simplyctwriter(xmldocument.toxml(), container, identifier)
  if os.path.exists("./index/RSS2-index.dat"):
    rssindexitems = {}
    with open('./index/RSS2-index.dat') as indexfile:
      # check if file has content
      if os.path.getsize('./index/RSS2-index.dat') > 0:
        for indexitem in indexfile:
          (key, value) = indexitem.split("|")
	  rssindexitems[key] = datetime.strptime(value[:25], '%Y-%m-%d %H:%M:%S\n') # strip first 25 characters to avoice error --ValueError: unconverted data remains
          print "Checking index size...", len(rssindexitems)
	  print "Checking index contents...", rssindexitems
      else:
        rssindexitems[os.path.abspath(os.path.join(container, identifier))] = rssdate
    if len(rssindexitems) < 5:
      print "index before: ", rssindexitems
      # add new object to dictionary if index items are less than limit
      print "Index too small --Adding object to index...", os.path.abspath(os.path.join(container, identifier))
      rssindexitems[str(os.path.abspath(os.path.join(container, identifier)))] = rssdate # get absolute path of file
      print "index after: ", rssindexitems
    else:
      # deleted last item with minimum date in index
      del rssindexitems[[key for key, value in rssindexitems.items() if value==min(rssindexitems.values())][-1]]
      rssindexitems[os.path.abspath(os.path.join(container, identifier))] = rssdate # slot in item
    # format and overwrite index file with new entries
    print "last for statement..."
    print "index to write: ", rssindexitems
    indexwriter = open("./index/RSS2-index.dat", mode="w")
    for key, value in sorted(rssindexitems.iteritems(), key=lambda(k, v): (v, k)):
      print "writing feed..."
      print "%s:%s" % (key, value)
      #indexwriter = open("./index/RSS2-index.dat", mode="w")
      indexwriter.write("%s|%s" % (key, value))
      indexwriter.write('\n') # new line for next record
      #indexwriter.close()
    print "index writen: ", rssindexitems
    indexwriter.close()

def writerecord(xmlrecord, xmlrecorddir, xmlrecordfile):
  




*** usebenza nzima --u work very hard

for i in a:
  