
Pre-requisite software

1. Oracle Java JDK 6 or 7 (standard SDK is fine, you don't need J2EE) or OpenJDK 6 or 7

phiri@phiri-performance:~$ java -version
java version "1.6.0_24"
OpenJDK Runtime Environment (IcedTea6 1.11.5) (6b24-1.11.5-0ubuntu1~12.04.1)
OpenJDK Server VM (build 20.0-b12, mixed mode)


2. Apache Maven 2.2.x or higher (Java build tool)

Apache Maven 2.2.1 (rdebian-8)
Java version: 1.6.0_24
Java home: /usr/lib/jvm/java-6-openjdk-i386/jre
Default locale: en_ZA, platform encoding: UTF-8
OS name: "linux" version: "3.2.0-29-generic-pae" arch: "i386" Family: "unix"


3. Apache Ant

phiri@phiri-performance:~$ ant -version
Apache Ant(TM) version 1.8.2 compiled on December 3 2011


4. 







## Database

createdb -U dspace -E UNICODE dspace
createdb: could not connect to database postgres: FATAL:  Peer authentication failed for user "dspace"



createdb -U dspace -E UNICODE dspace -h localhost




for workload in `seq 1 15`; do createdb -U dspace -E UNICODE w$workload -h localhost; done


for workload in `seq 1 15`; do dropdb w$workload; done







*********** I rolled the dice --I paid the price






 -> Create databases
    -> 
 -> 
 -> Installation directories
  -> 15 workloads
    -> create workload directories
    -> change permissions
    -> replicate configuration files
  -> 
 -> Workload context paths
    -> 
 -> 
 -> 
 -> 
 -> 
 -> GeoLite database file
 -> 



*** https://wiki.duraspace.org/display/DSPACE/MultipleDspaceOneServer

ant clean
ant -Dconfig=/<yourinstalldir>/config/dspace2.cfg fresh_install


cp /home/phiri/Projects/masters/dspace/dspace-3.0-release/dspace/target/dspace-3.0-build/config/w14-dspace.cfg /home/phiri/Projects/masters/dspace/dspace-3.0-release/dspace/target/dspace-3.0-build/config/dspace.cfg





cp /home/phiri/Projects/masters/dspace/dspace-3.0-release/dspace/target/dspace-3.0-build/config/w$workload-dspace.cfg /home/phiri/Projects/masters/dspace/dspace-3.0-release/dspace/target/dspace-3.0-build/config/dspace.cfg






*** populate DSpace instances


<import_structure>
     <community identifier="123456789/1">
                <name>w1</name>
                <description>w1</description>
                <collection identifier="123456789/2">
                        <name>Collection Name</name>
                        <description>Descriptive text</description>
                </collection>
     </community>
</import_structure>




create workload sets list
for each set in workload
      if corresponding set element exists in xml file
	    append set element to resultset


	    

create name
create description

append setspecs



import os
from lxml import etree

sets = sorted(os.listdir('/home/lphiri/datasets/ndltd/random/workload/w1'))
setspecs = etree.parse("union-ndltd-org-ListSets.xml")

for set in w:
    for l in setspecs.findall(".//set"):
            if (str(l.find('setSpec').text).encode('ascii', 'ignore') == set):
                    print l.find('setSpec').text,":",l.find('setName').text


import os
import sys
from lxml import etree

def dspace_structure(dataset, workload):
      root = etree.Element("import_structure")
      community = etree.Element("community")
      community.set("identifier", "123456789/1")
      community_name = etree.Element("name")
      community_name.text = "w1"
      community.append(community_name)
      community_description = etree.Element("description")
      community_description.text = "w1"
      community.append(community_description)
      root.append(community)
      handlecounter = 2
      w = sorted(os.listdir(dataset))
      setspecs = etree.parse("union-ndltd-org-ListSets.xml")
      for set in w:
	  for l in setspecs.findall(".//set"):
		  if (str(l.find('setSpec').text).encode('ascii', 'ignore') == set):
			  collection = etree.Element("collection")
			  collection_identifier = "123456789/"+str(handlecounter)
			  collection.set("identifier", collection_identifier)
			  collection_name = etree.Element("name")
			  collection_name.text = l.find('setSpec').text
			  collection.append(collection_name)
			  collection_description = etree.Element("description")
			  collection_description.text = l.find('setName').text
			  collection.append(collection_description)
			  community.append(collection)
			  handlecounter += 1
      ##print(etree.tostring(root, pretty_print=True))
      elementtree = etree.ElementTree(root)
      ##elementtree.write(sys.stdout)
      workloadstructurefile = workload+"-structure.xml"
      elementtree.write("w1-structure.xml")



for set in w:
    for l in setspecs.findall(".//set"):
            if (str(l.find('setSpec').text).encode('ascii', 'ignore') == set):
                    print(etree.tostring(l, pretty_print=True))





xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/          http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd"

