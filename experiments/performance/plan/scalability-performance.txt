The major significant architectural change that is proposed in this research is involves changing the way metadata records are stored in the repository sub-layer. More specifically, the proposed solution advocates using the filesystem for the storage of metadata records, as opposed to the conventional use of a database management system. This design decision is motivated by two key factors --simplicity and manageability. However, conventional wisdom points to the fact that system performance would evidently be affected for large collections.

The purpose of these experiments was to evaluate system performance and scalability of collections as the workload --in terms of collection size-- was increased. To test the proposed design, a series of experiments were designed, with each experiment specifically focusing on determining the break-even point at which performance and scalability drastically degrades.


Important Capabilities Needed
-> Indexing [cpu utilization, memory usage, network I/O]
-> Scalability *** [not sure how large collections will be... determine performance degradation]
-> XML Parsing [cpu utilization, memory usage, network I/O]
  -> xmlparsing is an expensive operation& a drag on performance... worth investigating


Questions to ask
-> how efficient the search needs to be
-> is transactional consistency required
-> is support for concurrenct updates, logging& recovery required


Test Environment

Server Hardware

Server Software
-> Variation of OS??? is this important --I don't think so *** [confirm brother Phiri]
-> Ubuntu
-> Windows ***
-> 
-> A fresh installation of Ubuntu was used with the application being tested only running. This was to prevent any possible issues that could result through running resource hungrey application on production servers.

Network Hardware
-> All experiments were conducted locally to prevent any potential network latency effects that could be introduced if experiments were conducted on a network.


Experiment

-> Indexing
  -> Single machine architecture [3]
  -> 
-> 



Bibliography
[1] http://nativexmldatabase.com/2010/08/22/xml-versus-relational-database-performance/
[2] http://arxiv.org/pdf/cs/0701168.pdf
[3] http://www.openandsearch.com/wp-content/uploads/2011/10/SolrScaling.pptx.pdf









